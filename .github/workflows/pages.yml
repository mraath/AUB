name: Optimize ALL images

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  pages: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      FORCE_OPTIMIZE_ALL: 1
    steps:
      - name: Run Image Optimizer
        if: steps.changed-files.outputs.any_changed == 'true' || steps.changed-files.outputs.any_deleted == 'true' || env.FORCE_OPTIMIZE_ALL == '1'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          DELETED_FILES: ${{ steps.changed-files.outputs.deleted_files }}
          FORCE_OPTIMIZE_ALL: 1
        run: |
          if [ "$FORCE_OPTIMIZE_ALL" = "1" ]; then
            echo "Forcing optimization of ALL images in content/..."
            find content -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) > changed-files.txt
            > deleted-files.txt
          else
            echo -e "${CHANGED_FILES}" > changed-files.txt
            echo -e "${DELETED_FILES}" > deleted-files.txt
          fi

          echo "Contents of changed-files.txt:"
          cat changed-files.txt || echo "Empty changed-files.txt"
          echo "Contents of deleted-files.txt:"
          cat deleted-files.txt || echo "Empty deleted-files.txt"

          # Batch processing: split file list and process each batch
          split -l 100 changed-files.txt batch_
          for batch in batch_*; do
            echo "Optimizing batch $batch..."
            node --max-old-space-size=4096 scripts/optimize-images.js $(cat "$batch") || { echo "optimize-images.js failed for $batch"; exit 1; }
          done

          echo "Optimized images:"
          ls -R optimized-images-temp || echo "No optimized-images-temp files"
